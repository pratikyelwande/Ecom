import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { RegisterSchema } from '../utils/schema.js';
import { executeQuery } from '../config/db.js';
import { apiResponse } from '../utils/apiResponse.js';

export const registerUser = async (req, res) => {
    try {
        const parsedData = RegisterSchema.parse(req.body);
        const { name, email, password, role = 'buyer', phone_number, address } = parsedData;

        // Check if email exists
        const existingUser = await executeQuery(
            'SELECT * FROM Users WHERE email = ?',
            [email]
        );

        if (existingUser.length > 0) {
            return apiResponse.error(res, 'Email already registered', 409);
        }

        // Hash password
        const passwordHash = await bcrypt.hash(password, 10);

        // Create user (Without passing `user_id`, as it is generated by the database)
        const result = await executeQuery(
            `INSERT INTO Users (name, email, password_hash, role, phone_number, address)
             VALUES (?, ?, ?, ?, ?, ?)`,
            [name, email, passwordHash, role, phone_number, address || null]
        );

        const user_id = result.insertId; // This is MySQL specific. For PostgreSQL, use RETURNING.

        // Generate JWT
        const token = jwt.sign(
            { user_id, email, role },
            process.env.JWT_SECRET_KEY,
            { expiresIn: process.env.JWT_EXPIRES_IN || '1h' }
        );

        return apiResponse.success(res, { token }, 'User registered successfully', 201);
    } catch (error) {
        console.error('Registration Error:', error);

        if (error.errors) {
            return apiResponse.error(res, error.errors[0].message, 400);
        }

        if (error.message.includes('Duplicate entry')) {
            return apiResponse.error(res, 'Email already registered', 409);
        }

        return apiResponse.error(res, error.message || 'Registration failed', 500);
    }
};

